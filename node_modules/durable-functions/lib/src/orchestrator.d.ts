export declare class Orchestrator {
    fn: (context: any) => IterableIterator<any>;
    private customStatus;
    constructor(fn: (context: any) => IterableIterator<any>);
    listen(): any;
    private handle(context);
    private callActivity(state, name, input?);
    private callActivityWithRetry(state, name, retryOptions, input?);
    private callSubOrchestrator(state, name, input, instanceId?);
    private callSubOrchestratorWithRetry(state, name, retryOptions, input, instanceId?);
    private continueAsNew(state, input);
    private createTimer(state, fireAt);
    private getInput(input);
    private setCustomStatus(customStatusObject);
    private waitForExternalEvent(state, name);
    private all(state, tasks);
    private any(state, tasks);
    private parseHistoryEvent(directiveResult);
    private finish(context, state, actions, isDone?, output?);
    private error(context, actions, err);
    private findEventRaised(state, eventName);
    private findRetryTimer(state, failedTask);
    private findSubOrchestrationInstanceCreated(state, name, instanceId);
    private findSubOrchestrationInstanceCompleted(state, createdSubOrchInstance);
    private findSubOrchestrationInstanceFailed(state, createdSubOrchInstance);
    private findTaskScheduled(state, name);
    private findTaskCompleted(state, scheduledTask);
    private findTaskFailed(state, scheduledTask);
    private findTimerCreated(state, fireAt);
    private findTimerFired(state, createdTimer);
    private setProcessed(events);
    private shouldFinish(result);
}
